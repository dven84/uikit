<?php

namespace trk\uikit;

use luya\cms\base\PhpBlock;

/**
 * Base block for all uikit blocks
 *
 * The BaseUikitBlock helps to allocate the view files for the blocks without using an alias.
 *
 * @author Iskender TOTOÄžLU <iskender@altivebir.com>
 */
abstract class BaseUikitBlock extends PhpBlock
{
    const CONFIGS_EXT = ".json";
    const COMPONENTS_PATH = __DIR__ . DIRECTORY_SEPARATOR . "components" . DIRECTORY_SEPARATOR;

    /**
     * @inheritdoc
     */
    protected $component = "";

    /**
     * @inheritdoc
     */
    protected $configs = [];

    /**
     * @inheritdoc
     */
    protected $defaults = [];

    /**
     * @inheritdoc
     */
    public $descriptions = [];

    /**
     * @inheritdoc
     */
    public $cacheEnabled = true;

    /**
     * @inheritdoc
     */
    public $extraValues = [];

    /**
     * @inheritdoc
     */
    public $helps = [];

    /**
     * Initialize
     */
    public function init() {
        if($this->component) {
            $this->setComponentConfigs();
            $this->setDefaults();
        }
    }

    /**
     * Get json content as array for given json file path
     *
     * @param string $path
     * @return array|mixed
     */
    protected function getJsonContent($path = "") {
        $data = [];
        if(file_exists($path)) {
            $json = file_get_contents($path);
            $data = json_decode($json, true);
        }
        return $data;
    }

    /**
     * Set component configs
     *
     */
    protected function setComponentConfigs() {
        $this->configs = $this->getJsonContent(self::COMPONENTS_PATH . $this->component . self::CONFIGS_EXT);
        $this->configs["vars"] = $this->setConfigFields(Uikit::element("vars", $this->configs, []));
        $this->configs["cfgs"] = $this->setConfigFields(Uikit::element("cfgs", $this->configs, []));
    }

    /**
     * Set config fields
     *
     * @param array $data
     * @return array
     */
    protected function setConfigFields(array $data = []) {
        if(count($data)) {
            foreach ($data as $i => $var) {
                // Set label
                $var['label'] = Module::t(Uikit::element('label', $var, ''));
                // Set placeholder translation
                if($placeholder = Uikit::element('placeholder', $var, '')) {
                    $var['placeholder'] = Module::t($placeholder);
                }
                // Set description translation
                if($description = Uikit::element('description', $var, '')) {
                    $this->descriptions[$var["var"]] = Module::t($description);
                }
                // Check options
                $options = Uikit::element('options', $var);
                if(is_array($options) && count($options)) {
                    foreach ($options as $key => $option) {
                        // Set option label translation
                        if(is_array($option) && Uikit::element('label', $option, '')) {
                            $var['options'][$key]['label'] = Module::t(Uikit::element('label', $option, ''));
                        }
                    }
                }
                $data[$i] = $var;
            }
        }

        return $data;
    }

    /**
     * Set defaults
     */
    protected function setDefaults() {
        $this->defaults = Uikit::element("defaults", $this->configs, []);
        unset($this->configs["defaults"]);
    }

    /**
     * @inheritdoc
     */
    public function config()
    {
        $configs = [
            "vars" => [],
            "cfgs" => []
        ];
        if($this->configs) $configs = $this->configs;
        return $configs;
    }

    /**
     * @inheritdoc
     */
    public function getFieldHelp()
    {
        return $this->descriptions;
    }

    /**
     * Get all carousel images (slides)
     *
     * @return array images
     */
    public function items()
    {
        $configs = $this->config();
        $items = Uikit::element("items", $configs["vars"], []);
        $data = [];
        foreach ($items as $item) {
            $data["name"] = $item["var"];
            $data["type"] = $item["type"];
        }
        foreach ($items as $item) {
            $image = BlockHelper::imageUpload($item['image'], false, true);
            if ($image) {
                if (isset($item['caption']) && !empty($item['caption'])) {
                    $image->caption = $item['caption'];
                }
                $data[] = [
                    'image' => $image,
                    'title' => isset($item['title']) ?: null,
                    'link' => isset($item['link']) ? BlockHelper::linkObject($item['link']) : null,
                ];
            }
        }
        return $data;
    }


    /**
     * Return translation
     *
     * @param string $prefix
     * @param string $term
     * @param string $separator
     * @return mixed|string
     */
    public function t($prefix = "", $term = "", $separator = " : ")
    {
        $translationTerm = $term ? $term : $prefix;
        $prefix = !$term ? 'uikit' : 'uikit.' . $prefix;

        $terms = explode('|', $translationTerm);
        if(count($terms) > 1) {
            $separator = Uikit::element(2, $terms, $separator);
            $_prefix = $prefix;
            $explode = explode('.', $terms[0]);
            if(count($explode) > 1) {
                $_prefix = $explode[0];
                $terms[0] = $explode[1];
            }
            return Module::t($_prefix, $terms[0]) . $separator . Module::t($prefix, $terms[1]);
        }
        return Module::t($prefix, $translationTerm);
    }

    /**
     * Return parallax configs
     *
     * @param string $name_prefix
     * @param string $label_prefix
     * @return array
     */
    public function getParallaxConfigs($name_prefix = "", $label_prefix = "") {
        $parallax = [];
        $parallax[] = $this->getConfig('parallax_x_start', [
            'var' => "{$name_prefix}_parallax_x_start",
            'label' => "{$label_prefix}parallax_horizontal_start"
        ]);
        $parallax[] = $this->getConfig('parallax_x_end', [
            'var' => "{$name_prefix}_parallax_x_end",
            'label' => "{$label_prefix}parallax_horizontal_end"
        ]);
        $parallax[] = $this->getConfig('parallax_y_start', [
            'var' => "{$name_prefix}_parallax_y_start",
            'label' => "{$label_prefix}parallax_vertical_start"
        ]);
        $parallax[] = $this->getConfig('parallax_y_end', [
            'var' => "{$name_prefix}_parallax_y_end",
            'label' => "{$label_prefix}parallax_vertical_end"
        ]);
        $parallax[] = $this->getConfig('parallax_scale_start', [
            'var' => "{$name_prefix}_parallax_scale_start",
            'label' => "{$label_prefix}parallax_scale_start"
        ]);
        $parallax[] = $this->getConfig('parallax_scale_end', [
            'var' => "{$name_prefix}_parallax_scale_end",
            'label' => "{$label_prefix}parallax_scale_end"
        ]);
        $parallax[] = $this->getConfig('parallax_rotate_start', [
            'var' => "{$name_prefix}_parallax_rotate_start",
            'label' => "{$label_prefix}parallax_rotate_start"
        ]);
        $parallax[] = $this->getConfig('parallax_rotate_end', [
            'var' => "{$name_prefix}_parallax_rotate_end",
            'label' => "{$label_prefix}parallax_rotate_end"
        ]);
        $parallax[] = $this->getConfig('parallax_opacity_start', [
            'var' => "{$name_prefix}_parallax_opacity_start",
            'label' => "{$label_prefix}parallax_opacity_start"
        ]);
        $parallax[] = $this->getConfig('parallax_opacity_end', [
            'var' => "{$name_prefix}_parallax_opacity_end",
            'label' => "{$label_prefix}parallax_opacity_end"
        ]);

        return $parallax;
    }

    /**
     * Get group of configs
     *
     * @param string $name
     * @return array
     */
    public function getConfigs($name = "") {
        $configs = Uikit::element($name, Module::$configs, ['var' => $name, 'label' => $name, 'type' => 'zaa-text']);
        $return = [];
        foreach ($configs as $key => $config) {
            if(is_array($config)) {
                $name = Uikit::element('var', $config, $key);
                $return[$key] = $this->getConfig($name);
            }
        }
        return $return;
    }

    /**
     * Get config from config files
     *
     * @param string $name
     * @param array $overwrites
     * @return array|mixed
     */
    public function getConfig($name = "", $overwrites = [])
    {
        $names = explode('|', $name);
        $name1 = "";
        if(count($names) > 1) {
            $name = $names[0];
            $name1 = $names[1];
        }
        // Check config
        $config = Uikit::element($name, Module::$configs, ['var' => $name, 'label' => $name, 'type' => 'zaa-text']);
        // Check var value
        if($name1) {
            $config['var'] = $name1;
        } else if(!Uikit::element('var', $config)) {
            $config['var'] = $name;
        }
        // Overwrites
        if(count($overwrites)) $config = array_merge($config, $overwrites);

        return $this->setConfig($config);
    }

    /**
     * Set config & get config data
     *
     * @param array $config
     * @return array
     */
    public function setConfig(array $config = []) {
        // Config name
        $name = Uikit::element('var', $config, 'input');
        // Set label
        $config['label'] = $this->t('label', Uikit::element('label', $config, ''));
        // Set placeholder translation
        if($placeholder = Uikit::element('placeholder', $config, '')) {
            $config['placeholder'] = $this->t('placeholder', $placeholder);
        }
        // Set description translation
        if($description = Uikit::element('description', $config, '')) {
            $this->descriptions[$name] = $this->t('description', $description);
        }
        // Set help translation
        if($help = Uikit::element('help', $config, '')) {
            $this->helps[$name] = $this->t('description', $help);
        }
        // Check options
        $options = Uikit::element('options', $config);
        if(is_array($options) && count($options)) {
            foreach ($options as $key => $option) {
                // Set option label translation
                if(is_array($option) && Uikit::element('label', $option, '')) {
                    $config['options'][$key]['label'] = $this->t('value', Uikit::element('label', $option, ''));
                }
            }
        }

        return $config;
    }

    /**
     * Get configs with default values
     *
     * config_key => config_value or defualt_value
     *
     * @return array
     */
    public function getValues()
    {
        $configs = $this->config();
        $vars = Uikit::element('vars', $configs, []);
        $cfgs = Uikit::element('cfgs', $configs, []);
        // $placeholders = Uikit::element('placeholders', $configs, []);
        $configs = [];
        if(count($vars)) {
            foreach ($vars as $i => $var) {
                $configs[$var['var']] = $this->getVarValue($var['var'], Uikit::element('initValue', $var, ''));
            }
        }
        if(count($cfgs)) {
            foreach ($cfgs as $i => $cfg) {
                $configs[$cfg['var']] = $this->getCfgValue($cfg['var'], Uikit::element('initValue', $cfg, ''));
            }
        }

        return $configs;
    }

    /**
     * @inheritDoc
     */
    public function extraVars()
    {
        return $this->extraValues;
    }

    /**
     * @param array $params
     * @return mixed
     */
    public function frontend(array $params = array())
    {
        if(!Uikit::element('configs', $params, '')) $params['configs'] = Uikit::configs($this->getValues());
        return $this->view->render($this->getViewFileName('php'), $params, $this);
    }

	/**
	 * @inheritdoc
	 */
    public function getViewPath()
    {
        return  dirname(__DIR__) . '/src/views/blocks';
    }
}